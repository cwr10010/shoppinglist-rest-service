
buildscript {
    ext {
        // compile and runtime
        kotlin_logging_version = '1.7.8'
        springfox_version = '2.9.2'

        jackson_module_kotlin_version = '2.10.1'
        jjwt_version = '0.9.1'

        flyway_version = '6.0.6'
        mysql_version = '8.0.17'
        h2_version = '1.4.200'

        // test
        kotson_version = '2.5.0'
        subetha_smtp_version = '3.1.7'

        jacoco_version = '0.8.3'
    }
}

plugins {

    id "org.jetbrains.kotlin.jvm" version '1.3.61'
    id "org.jetbrains.kotlin.plugin.spring" version '1.3.61' // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'

    // coverage
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.9.0'

    // package
    id "com.avast.gradle.docker-compose" version "0.10.7"
    id 'com.github.ben-manes.versions' version '0.27.0'

}

repositories {
    jcenter()
}

group 'de.cwrose'
version '1.0-SNAPSHOT'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-stdlib" // Required for Kotlin integration
    implementation "org.jetbrains.kotlin:kotlin-reflect"

    implementation ("io.github.microutils:kotlin-logging:$kotlin_logging_version" as String)

    implementation ('org.springframework.boot:spring-boot-starter-web')
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-freemarker'

    implementation ("com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_module_kotlin_version" as String)

    implementation ("org.flywaydb:flyway-core")
    //implementation ("mysql:mysql-connector-java:$mysql_version" as String)
    implementation 'com.h2database:h2'

    implementation ("io.jsonwebtoken:jjwt:$jjwt_version" as String)

    implementation 'org.springdoc:springdoc-openapi-webmvc-core:1.2.18'

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation ("com.h2database:h2:$h2_version" as String)

    testImplementation ("org.jetbrains.kotlin:kotlin-test-junit")
    testImplementation ("com.github.salomonbrys.kotson:kotson:$kotson_version" as String)

    testImplementation ("org.subethamail:subethasmtp:$subetha_smtp_version" as String)
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['b', 'alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

dockerCompose {
    useComposeFiles = ['docker-compose-dev.yml'] // like 'docker-compose -f <file>'
    startedServices = ['srs_api'] // list of services to execute when calling 'docker-compose up' (when not specified, all services are executed)
    removeImages = "Local" // Other accepted values are: "All" and "Local"
    waitForTcpPorts = true // turns off the waiting for exposed TCP ports opening
    dockerComposeWorkingDirectory = 'deploy/'
    environment.put "PATH", "/usr/local/bin" // Pass environment variable to 'docker-compose' for substitution in compose file
}

composeUp.dependsOn(assemble)

test {
    systemProperty 'spring.profiles.active', 'test'
}

jacoco {
    toolVersion = "$jacoco_version"
    reportsDir = file("$buildDir/jacoco" as String)
}

jacocoTestReport {
    reports {
        html.destination file("${buildDir}/jacocoHtml" as String)
    }
}

coveralls.sourceDirs = ['src/main/kotlin']

wrapper {
    gradleVersion = "6.0.1"
    distributionType = Wrapper.DistributionType.ALL
}
